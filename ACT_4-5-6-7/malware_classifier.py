# malware_classifier.py
# Activity: Malware Signature Classification
# Author: <Your Name>
# Date: <Date>
#
# This script simulates file attributes (features) like file size, entropy, and number of imports.
# Then it trains a Random Forest Classifier to distinguish between benign and malicious files.

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report

# 1. Simulate a dataset of file features
np.random.seed(42)  # for reproducibility

n_samples = 500

# Features:
# File size (in KB), File entropy, Number of imports, Suspicious section flag (0/1)
file_size = np.random.normal(loc=500, scale=200, size=n_samples).astype(int)  # typical size ~500KB
file_entropy = np.random.uniform(3, 8, size=n_samples)  # entropy between 3 (low) and 8 (high)
num_imports = np.random.poisson(lam=10, size=n_samples)  # number of imports ~10
suspicious_section = np.random.choice([0, 1], size=n_samples, p=[0.7, 0.3])  # 30% suspicious

# Labels: 0 = Benign, 1 = Malware
labels = []
for i in range(n_samples):
    # simple heuristic for labeling
    if file_entropy[i] > 6.5 and suspicious_section[i] == 1:
        labels.append(1)  # likely malware
    elif file_size[i] < 200 and num_imports[i] > 15:
        labels.append(1)
    else:
        labels.append(0)
labels = np.array(labels)

# 2. Create DataFrame
data = pd.DataFrame({
    'FileSize': file_size,
    'Entropy': file_entropy,
    'NumImports': num_imports,
    'SuspiciousSection': suspicious_section,
    'Label': labels
})

# 3. Split features and labels
X = data[['FileSize', 'Entropy', 'NumImports', 'SuspiciousSection']]
y = data['Label']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# 4. Train Random Forest Classifier
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_train)

# 5. Predictions
y_pred = clf.predict(X_test)

# 6. Output classification report
print("=== Malware Classification Report ===")
print(classification_report(y_test, y_pred, target_names=["Benign", "Malware"]))
